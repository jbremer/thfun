ThFun - Fun with Threads    (C) 2012 sft, jbremer

    Introduction
 
The idea of ThFun is to present ways to use threads as obfuscation method.
We believe that misusing threads can result in great anti-debugging methods.

In the following few chapters we will discuss various methods that may or may
not combine into our master piece.

    Method I: Dispatching function Calls

This is one of the easiest methods. Instead of calling a function directly, we
spawn a new thread that calls the particular function. From there we can
either wait for the thread to finish or doing something else in the meantime.
When the thread has finished doing its thing, we get the return value and
continue normal execution flow from there.

    Method II: Splitting functionality over multiple Threads

Assuming we have a function (or a block of code, for that matter) we can split
this function into multiple parts. After spawning multiple threads, each
containing a small part of the function, we can start "execution" of the
original function. While one of the threads will start doing something, the
other threads enter a busy-loop which waits until a variabele is set. So
basically we rip a function apart and split it up over multiple threads,
great care has to be taken regarding the general purpose registers.
It is also possible to execute "dummy" threads which do nothing but random 
mathematical calculations which could also obsucre the essence of the actual
running thread

The main idea is based on using distorm to split the function into bb until
we have reached the end of the function (we fetched the last 'ret' instruction and haven't reached any <align 10h /* assuming this is VC */ push ebp> sequence )

After we have all the bb of the function we append a prologue which:
1. Adds the required stack storage (sub esp, .. ) to the variables allocated by the function
2. Calls WaitForSingleObject and waits until the previous bb (thread) has finished, thus only once the previous thread has finished the execution will continue as if there were threads at all

How do we create the object for WaitForSingleObject for each thread and how we make sure
we send it over to every thread (current bb and next ) and make sure that closing it will be steathly enough not to discover the execution flow ? 

After the current thread has finished the execution an epilogue is appended to the function and this epilogue actually calls the function which actually calls the CloseHandle to transfer execution to the next thread <--


    Method III: Polymorphic Checksum Checks

Two threads are connected. Between performing regular instructions, checks
are performed in the linked threads. For example, a thread makes sure that the
other thread is still running, is still executing a particular function, etc.
This can be really useful against the usual Reverse Engineering method where
other threads are suspended.
The first thread could first spawn a child and thus debug it, this could be done
for all threads executing BB and "dummy" threads, thus making only kernel debug
possible to debug all the threads.


This is a classical fork() and Debug() sequence, we can use timers to wake the checker thread to calculate a md5/checksum everytime 
Once again, this makes the thought about how to cause the fork and the debug event, perhaps some global struture which contains some PIDs of debuggee and debugger


    Method IV: Timing Attacks

While a thread performs a particular task, it logs some data, such as time.
After, or while a thread is still running (Method III), the threads logged
information will be checked, e.g. a simple for loop should take 10 seconds at
max, not 10 minutes.

Using RDTSC instruction to check how much it took all the sequence, we can run the functions (trace)
during generation stage and see how long it takes w/ random values (assuming these are integers and not some sophisticated structs here)
This method could be the checksum used in Method III to see if the thread is still a virgin or it has been tampered.

    Method V: Dynamic Value Generation

Several threads are spawned, each of them calculates some value(s). By taking
the return value(s) of these threads and combining them, a new value is
generated, use this as an address, hash, whatever. Combine this method with
Method IV, for example to define that one of the threads should take a maximum
of 5 seconds to finish, this way a wrong value will be generated if the thread
takes too long (e.g. suspended, reverse engineered.)


The value is calculated using some random function (think NCD or Shannon's entropy for this code sequence, bb, or several functions),
and is then put in a global locked array, once all functions have finished their duty,
the "epilogue" functions calculates the actual return address to the next function, this could stop, as mentioned beforehand - timing attacks if used correctly w/ RDTSC or time() etc

    Method VI: Spoofing Threads

We have multiple threads, but by spoofing the Thread Environment Block, we can
spoof threads. This way the current thread id will not match that of what an
external listing (such as one by ollydbg) shows.

This method is quite classical, link the original binary w/ some forged functions which are also 
obfuscated using the methods displayed here beforehand and thus it is quite hard to identify which functions are legitimate and which are not
Assuming all functions are generated on the fly (and stay encrypted on disk), it is quite hard to find the actual 
execution flow if you have N main threads and N*N sub-threads which continue execution afterwards.

original function (or bb) looks like this:
..snip
.text:004030AF                 push    0
.text:004030B1                 push    ecx
.text:004030B2                 mov     ecx, esp
.text:004030B4                 mov     [ebp+var_144], esp
.text:004030BA                 push    400h
.text:004030BF                 call    sub_40B370
.text:004030C4                 push    0
.text:004030C6                 push    offset aYourProductHas ; "Your product has been temporarily activ"...
.text:004030CB                 lea     ecx, [ebp+var_148]
.text:004030D1                 push    ecx
.text:004030D2                 call    ds:?tr@QObject@@SA?AVQString@@PBD0@Z ; QObject::tr(char const *,char const *)
.text:004030D8                 add     esp, 0Ch
.text:004030DB                 mov     [ebp+var_24C], eax
.text:004030E1                 mov     edx, [ebp+var_24C]
.text:004030E7                 mov     [ebp+var_250], edx
.text:004030ED                 mov     [ebp+var_4], 22h
.text:004030F4                 mov     eax, [ebp+var_250]
.text:004030FA                 push    eax
.text:004030FB                 lea     ecx, [ebp+var_14C]
.text:00403101                 push    ecx
.text:00403102                 call    ds:?applicationName@QCoreApplication@@SA?AVQString@@XZ ; QCoreApplication::applicationName(void)
.text:00403108                 add     esp, 4
.text:0040310B                 mov     [ebp+var_254], eax
.text:00403111                 mov     edx, [ebp+var_254]
.text:00403117                 mov     [ebp+var_258], edx
.text:0040311D                 mov     byte ptr [ebp+var_4], 23h
.text:00403121                 mov     eax, [ebp+var_258]
.text:00403127                 push    eax
.text:00403128                 mov     ecx, [ebp+var_168]
.text:0040312E                 push    ecx
.text:0040312F                 call    ds:?information@QMessageBox@@SA?AW4StandardButton@1@PAVQWidget@@ABVQString@@1V?$QFlags@W4StandardButton@QMessageBox@@@@W421@@Z ; QMessageBox::information(QWidget *,QString const &,QString const &,QFlags<QMessageBox::StandardButton>,QMessageBox::StandardButton)
.text:00403135                 add     esp, 14h
.text:00403138                 mov     byte ptr [ebp+var_4], 22h
.text:0040313C                 lea     ecx, [ebp+var_14C]
.text:00403142                 call    ds:??1QString@@QAE@XZ ; QString::~QString(void)
.text:00403148                 mov     [ebp+var_4], 0FFFFFFFFh
.text:0040314F                 lea     ecx, [ebp+var_148]
.text:00403155                 call    ds:??1QString@@QAE@XZ ; QString::~QString(void)
.text:0040315B                 jmp     loc_4032D2
..snip...

we take this bb and split it into multiple chunks, so we get something like this :


f1_Chunk1:
.text:004030AF                 push    0
.text:004030B1                 push    ecx
.text:004030B2                 mov     ecx, esp
.text:004030B4                 mov     [ebp+var_144], esp

f1_Chunk2:
.text:004030BA                 push    400h
.text:004030BF                 call    sub_40B370
.text:004030C4                 push    0
.text:004030C6                 push    offset aYourProductHas ; "Your product has been temporarily activ"...
.text:004030CB                 lea     ecx, [ebp+var_148]
.text:004030D1                 push    ecx
.text:004030D2                 call    ds:?tr@QObject@@SA?AVQString@@PBD0@Z ; QObject::tr(char const *,char const *)

f1_Chunk3:
.text:004030D8                 add     esp, 0Ch
.text:004030DB                 mov     [ebp+var_24C], eax
.text:004030E1                 mov     edx, [ebp+var_24C]
.text:004030E7                 mov     [ebp+var_250], edx
.text:004030ED                 mov     [ebp+var_4], 22h
.text:004030F4                 mov     eax, [ebp+var_250]
.text:004030FA                 push    eax
.text:004030FB                 lea     ecx, [ebp+var_14C]
.text:00403101                 push    ecx
.text:00403102                 call    ds:?applicationName@QCoreApplication@@SA?AVQString@@XZ ; QCoreApplication::applicationName(void)

etc etc
then, you take another function, and split it also into chunks, so you get f2_chunk1, f2_chunk2, f2_chunk3
then you take both chunks and merge them into one code block, so you get something like this:

f1_chunk1 ; f2_chunk1 ; f1_chunk2 ; f2_chunk2 ; f1_chunk3 ; f2_chunk3 ; etc

eventually you encrypt everything into disk using xtea/whatever and upon runtime you decrypt it and start running both f1 
function with all of the previous methods mentioned above and f2 with all of the previous methods mentioned above
so it is quite hard to actually understand which function is actually legitimate to follow 



-------


Before going into any sort of simple implementation I think we should first
state the kind of problems we might encouter during the development
of a simple proof-of-concept that will work.




	Problem I: One path, one graph

All the methods mentioned above do not parallelize the program itself, so
the program will eventually execute as a single threaded program.
Two real functions will not be executed in parallel, and thus the Control
Flow Graph will be the same ( if you remove all of the obfuscations mentioned
above ) 

We should consider at least trying to identify which functions could work 
in parallel ( aka do not depend on each other etc ) and then execute them
in parallel with all the obfuscations mentioned above. Such phase will make
obfuscation much harder in order to distinguish which threads acutally
matter and which do not do anything 


	Problem II: Be on the safe side

If we consider to solve the first problem, we will have to transform non-thread-
safe code into thread-safe code, such task implementation is unknown to me
but I consider about a few things which we must consider when doing such task.
	1. FS:[0xXXX] and the like - if the program touches this section
		we must know if it hurts any part of our obfuscation 
		and if so we must identify how to mitigate it's acts
	2. Global variables - used in different parallel functions must be 
		locked if a function accesses them the same time another function 
		accesses them.


There is another things which we must think about is deadlocks and blocking 
threads/functions


	Problem III: Dead, locks

Since the code is originally single threaded, we must consider that some 
of the parallel code will block certain operations, therefore we must 
make sure that none of our parallel things create any sort of blocking
to which interfere with other functions
The same concepts goes for locks which are forgotten to be freed.






 
